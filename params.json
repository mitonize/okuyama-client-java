{"name":"Okuyama-client-java","tagline":"Java client library for Okuyama KVS","body":"okuyama-client-java\r\n===================\r\n\r\nJava client library for Okuyama KVS\r\n\r\n## Feature\r\n* Basic set and get operation\r\n* Compare And Set value updating\r\n* Tagging\r\n* Value compression ability with customizable compression strategy\r\n* Socket pooling with adaptive expansion\r\n* Adaptive value serialization form. Encoding base64 for serializable object.  \r\n\r\n## Usage\r\n\r\nAt first, create OkuyamaClientFactory and specify endpoints and pool size.\r\nOkuyamaClientFactory can be held through application life time.\r\n\r\n```java\r\nString[] endpoints = {\"127.0.0.1:8888\", \"127.0.0.1:8889\"};\r\nint poolSize = 10;\r\n\r\nOkuyamaClientFactory factory = new OkuyamaClientFactoryImpl(endpoints, poolSize);\r\n\r\n// Enable compression with default compression strategy, compress if size of value is over 32 bytes\r\nfactory.setCompressionMode(true);\r\n\r\n// Or set your own compression strategy\r\nfactory.setCompressionStrategy(new YourCompressionStrategy());\r\n```\r\n\r\nWhen you use client instance, call factory.createClient(). This instance is supposed to retain short time as in function.\r\n\r\n```java\r\nOkuyamaClient client = factory.createClient();\r\n```\r\n## Compatibility \r\n###\r\n互換モードを指定すると、オリジナルのOkuyamaClientからでも読み出し可能な形式で格納するように下の設定でクライアントを生成する。\r\n\r\n* キーを必ずbase64エンコードする\r\n* 文字列を格納する場合にもJavaのシリアライズを行ってからBase64エンコードする\r\n* 圧縮しない（圧縮戦略を設定すると例外を発生させる）\r\n\r\n## Compression\r\n### Implementing CompressionStrategy\r\n```java\r\npublic class YourCompressionStrategy implements CompressionStrategy {\r\n\tprivate static final int MINIMUM_LENGTH_TO_COMPRESS = 32;\r\n\r\n\tprivate Compressor compressorDefault;\r\n\tprivate Compressor compressorFast;\r\n\r\n\tpublic YourCompressionStrategy() {\r\n\t\tcompressorDefault = Compressor.getCompressor(JdkDeflaterCompressor.COMPRESSOR_ID);\r\n\t\tcompressorFast = Compressor.getCompressor(LZFCompressor.COMPRESSOR_ID);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic Compressor getSuitableCompressor(String key, int valueLength) {\r\n\t\tif (valueLength < MINIMUM_LENGTH_TO_COMPRESS) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tif (key.startsWith(\"session:\")) {\r\n\t\t\treturn compressorFast;\r\n\t\t}\r\n\t\tif (key.startsWith(\"count:\")) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn compressorDefault;\r\n\t}\r\n}\r\n```\r\n","google":"UA-8493197-2","note":"Don't delete this file! It's used internally to help with page regeneration."}